diff --git a/src/gdb_packet.c b/src/gdb_packet.c
index c7709aa7..f5ca6cbb 100644
--- a/src/gdb_packet.c
+++ b/src/gdb_packet.c
@@ -335,16 +335,35 @@ void gdb_putpacket_f(const char *const fmt, ...)
 	va_end(ap);
 }
 
-void gdb_out(const char *const buf)
+// faster, no mallocs
+void gdb_outn(const char *const buf, const size_t buf_len)
 {
-	const size_t buf_len = strlen(buf);
-	char *hexdata = calloc(1, 2U * buf_len + 1U);
-	if (!hexdata)
-		return;
+	const char hexdigit[] = "0123456789ABCDEF";
+	size_t tries = 0;
+	do {
+		DEBUG_GDB("%s: ", __func__);
+		gdb_if_putchar(GDB_PACKET_START, 0);
+		gdb_if_putchar('O', 0);
+		uint8_t csum = 'O';
+		for (size_t i = 0; i < buf_len; ++i) {
+			uint8_t c = buf[i];
+			uint8_t upperdigit = hexdigit[c >> 4U];
+			gdb_if_putchar(upperdigit, 0);
+			csum += upperdigit;
+			uint8_t lowerdigit = hexdigit[c & 0xfU];
+			gdb_if_putchar(lowerdigit, 0);
+			csum += lowerdigit;
+		}
+		gdb_if_putchar(GDB_PACKET_END, 0);
+		gdb_if_putchar(hexdigit[csum >> 4U], 0);
+		gdb_if_putchar(hexdigit[csum & 0xfU], 1);
+		DEBUG_GDB("\n");
+	} while (!noackmode && gdb_if_getchar_to(2000) != GDB_PACKET_ACK && tries++ < 3U);
+}
 
-	hexify(hexdata, buf, buf_len);
-	gdb_putpacket2("O", 1, hexdata, 2U * buf_len);
-	free(hexdata);
+void gdb_out(const char *const buf)
+{
+	gdb_outn(buf, strlen(buf));
 }
 
 void gdb_voutf(const char *const fmt, va_list ap)
diff --git a/src/include/gdb_packet.h b/src/include/gdb_packet.h
index a35666a5..80d32935 100644
--- a/src/include/gdb_packet.h
+++ b/src/include/gdb_packet.h
@@ -51,6 +51,7 @@ void gdb_putpacket_f(const char *packet, ...) GDB_FORMAT_ATTR;
 void gdb_put_notification(const char *packet, size_t size);
 #define gdb_put_notificationz(packet) gdb_put_notification((packet), strlen(packet))
 
+void gdb_outn(const char *buf, const size_t buf_len);
 void gdb_out(const char *buf);
 void gdb_voutf(const char *fmt, va_list);
 void gdb_outf(const char *fmt, ...) GDB_FORMAT_ATTR;
